{"config":{"lang":["en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230FoggyWhale\u7684\u4e2a\u4eba\u7a7a\u95f4\ud83d\udc4f","text":"<p>\u4e3b\u9875\u6b63\u5728\u65bd\u5de5\u4e2d...</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/","title":"Number Systems and Boolean Algebra","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#lcdf","title":"LCDF","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#week-1-number-systems-and-boolean-algebra","title":"Week 1: Number Systems and Boolean Algebra","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#part-1","title":"Part 1","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#number-systems","title":"Number Systems","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#representation","title":"Representation","text":"<ul> <li> <p>A number with \\(radix\\ r\\) is represented by a string of digits:   $$   A_{n-1}A_{n-2}\\dots A_{1}A_{0}.A_{-1}A_{-2}\\dots A_{-m+1}A_{-m}   $$   where \\(0\\leq{A_i}&lt;r\\) and \\(.\\) is the radix point</p> </li> <li> <p>The string of digits represents the power series:   $$   Number_r=(\\Sigma_{i=0}^{i=n-1}A_i\\cdot{r^i}+\\Sigma_{j=-m}^{j=-1}A_j\\cdot{r^j})   $$</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#binary-arithmetic","title":"Binary Arithmetic","text":"<ul> <li>Single Bit Addition with Carry</li> <li>Mutiple Bit Addition</li> <li>Single Bit Subtraction with Borrow</li> <li>Mutiple Bit Subtraction</li> <li>Multiplication</li> <li>BCD Addition</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#single-bit-subtraction-with-borrow","title":"Single Bit Subtraction with Borrow","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#mutiple-bit-binary-subtraction","title":"Mutiple Bit Binary Subtraction","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#binary-multiplication","title":"Binary Multiplication","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#converting-decimal-to-binary","title":"Converting Decimal to Binary","text":"<ul> <li>Method 1</li> <li>Subtract the largest power of 2 not exceed the number</li> <li>Repeat, subtracting from the prior remainder and recording the power, until the remainder is zero</li> <li>Place 1's in the positions in the binary result corresponding to the powers recorded; in all other positions place 0's</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#method-1","title":"Method 1","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#converting-decimal-to-binary-cont","title":"Converting Decimal to Binary (Cont.)","text":"<ul> <li>Method 2</li> <li>Convert the Integer Part</li> <li>Convert the Fraction Part</li> <li>Join the two results with a radix point</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#conversion-details","title":"Conversion Details","text":"<ul> <li>To Convert the Integral Part:</li> </ul> <p>Repeatedly divide the number by the new radix and save the remainders. The digits for the new radix are the remainders in reverse order of their computation. If the new radix is more than 10, then convert all remainders exceed 10 to digits A, B, ...</p> <ul> <li>To Convert the Fraction Part:</li> </ul> <p>Repeatedly multiply the fraction by the new radix and save the integer digits that result. The digits for the new radix are the Integer digits in order of their computation. If the new radix is more than 10, then convert all integers exceed 10 to digits A, B, ...</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#example-convert-466875_10-to-base-2","title":"Example: Convert \\(46.6875_{10}\\) To Base 2","text":"<ul> <li>Convert 46 to Base 2</li> </ul> <p>\\(46_{10}=101110_2\\)</p> <ul> <li>Convert 0.6875 to Base 2</li> </ul> <p>\\(0.6875_{10}=0.1011_2\\)</p> <ul> <li>Join the results together with the radix point:</li> </ul> <p>radix point:</p> <p>\\(46.6875_{10}=101110.1011_2\\)</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#q-what-if-the-fractional-part-cant-become-0-as-a-result-of-the-repeated-multiplications","title":"Q: What if the fractional part can't become 0 as a result of the repeated multiplications?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#solution-specify-number-of-bits-to-right-of-radix-point-and-round-or-truncate-to-this-number","title":"Solution: Specify number of bits to right of radix point and round or truncate to this number.","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#octal-hexadecimal-to-binary-and-back","title":"Octal (Hexadecimal) to Binary and Back","text":"<ul> <li>Example:</li> </ul> <p>\\((67.731)_8=110\\ 111.111\\ 011\\ 001_2\\)</p> <p>\\((312.64)_8=011\\ 001\\ 010.110\\ 100_2=11001010.1101_2\\)</p> <p>\\(11\\ 111\\ 101.010\\ 011\\ 11_2=(375.236)_8\\)</p> <p>\\(10\\ 110.11_2=(26.8)_8\\)</p> <p>\\((3\\rm{AB}4.1)_{16}=0011\\ 1010\\ 1011\\ 0100.0001_2\\)</p> <p>\\((21\\rm{A}.5)_{16}=0010\\ 0001\\ 1010.0101_2\\)</p> <p>\\(1001101.01101_2=0100\\ 1101.0110\\ 1000_2=(4\\rm{D}.68)_{16}\\)</p> <p>\\(110\\ 0101.101_2=(65.\\rm{A})_{16}\\)</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#q-how-many-bits-are-required-to-represent-decimal-digits-with-a-binary-code","title":"Q: How many bits are required to represent decimal digits with a binary code?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#solution-lceil-log_210-rceil4","title":"Solution: \\(\\lceil log_2{10} \\rceil=4\\)","text":"<ul> <li>Generally, Given M elements to be presented by a binary code, the minimum number of bits, \\(n\\), needed, satisfies the following relationships:   $$   2^n\\geq{M}&gt;2^{n-1}   $$   \\(n=\\lceil{log_2{M}}\\rceil\\), where \\(\\lceil x \\rceil\\) called the ceiling function, is the integer greater than of equal to x</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#more-binary-codes","title":"More Binary Codes","text":"<ul> <li> <p>You can represent 4 elements in \\(radix\\ r=2\\) with \\(n=2\\) digits: (00, 01, 10, 11).</p> </li> <li> <p>You can represent 4 elements in \\(radix\\ r=2\\) with \\(n=4\\) digits: (0001, 0010, 0100, 1000).</p> </li> <li> <p>This second code is called a \"One-hot code\".</p> </li> <li> <p>One-hot encoding consists in using one bit representing each state.</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#more-binary-codes-cont","title":"More Binary Codes (Cont.)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#binary-coded-decimal-bcd","title":"Binary Coded Decimal (BCD)","text":"<ul> <li>The BCD code is the 8, 4, 2, 1 code.</li> <li>8, 4, 2, and 1 is weights</li> <li>BCD is a weighted code</li> <li>This code is the simplest, most intuitive binary code for decimal digits and uses the same powers of 2 as a binary number, but only encodes the first ten values from 0 to 9</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#q-how-to-distinguish-between-conversion-and-coding","title":"Q: How to distinguish between Conversion and Coding?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#conversion-or-coding","title":"Conversion or Coding?","text":"<ul> <li>Conversion is to convert a decimal number into a binary number.</li> <li>Coding is to convert every decimal digit into a binary number.</li> <li>\\(13_{10}=1101_2\\) (This is Conversion)</li> <li>\\(13 \\Leftrightarrow 0001|0011\\) (This is Coding)</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#example-add-2905_rmbcd-to-1897_rmbcd","title":"Example: Add \\(2905_{\\rm{BCD}}\\) to \\(1897_{\\rm{BCD}}\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#error-detection-methods","title":"Error-Detection Methods","text":"<ul> <li>Parity Bit Error-Detection Codes</li> <li>Parity is an extra bit appended onto the code word to make the number of 1's odd or even.</li> <li>Even Parity: the number of 1's in the code word is even.</li> <li>Odd Parity: the number of 1's in the code word is odd.</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#gray-code","title":"Gray Code","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#conversion-from-binary-code-to-gray-code","title":"Conversion from Binary Code to Gray Code","text":"<ul> <li>Let Binary code be \\(b_3b_2b_1b_0\\). Then the Gray code can be obtained as follows:</li> </ul> <p>\\(g_3=b_3\\)</p> <p>\\(g_2=b_3 \\oplus b_2\\)</p> <p>\\(g_1=b_2 \\oplus b_1\\)</p> <p>\\(g_0=b_1 \\oplus b_0\\)</p> <p></p> Figure. Convert Binary code 11101 into Gray code"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#part-2","title":"Part 2","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#boolean-algebra","title":"Boolean Algebra","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#logical-operation","title":"Logical Operation","text":"<ul> <li>The three basic logical operations are:</li> <li>AND</li> <li>OR</li> <li>NOT</li> <li>AND is denoted by a dot ( \\(\\cdot\\) )</li> <li>OR is denoted by a plus ( + )</li> <li>NOT is denoted by an overbar ( $ \\overline{} $ ), a single quote mark ( ' ), or ( ~ ) before the variable</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#logic-gates","title":"Logic Gates","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#other-commonly-used-logic-gates","title":"Other Commonly Used Logic Gates","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#universal-gate","title":"Universal Gate","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#logic-diagrams-and-expressions","title":"Logic Diagrams and Expressions","text":"Truth tables and waveforms are unique, while equations and diagrams are not."},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#boolean-algebra_1","title":"Boolean Algebra","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#duality-rules","title":"Duality rules","text":"<ul> <li> <p>The dual of an algebraic expression is obtained by interchanging \\(+\\) and \\(\\cdot\\) and interchanging 0's and 1's, while variable don't be inverted</p> </li> <li> <p>Seek the dual of a function, the operation order keep as same as the origin function</p> </li> <li>The identities appear in dual pairs. When there is only one identity on a line the identity is self-dual. i.e., the dual expression = the original expression.</li> <li>Unless it happens to be self-dual, the dual of an expression does not equal to the expression itself.</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#duality-rules-cont","title":"Duality rules (Cont.)","text":"<ul> <li>Example: \\(F=(A+\\overline{C})\\cdot{B}+0\\)</li> </ul> <p>Dual: \\(F=(A\\cdot\\overline{C}+B)\\cdot{1}=A\\cdot\\overline{C}+B\\)</p> <ul> <li>Example: \\(G=X\\cdot{Y}+(\\overline{W+Z})\\)</li> </ul> <p>Dual: \\(G=((X+Y)\\cdot{\\overline{(W\\cdot{Z})}})=(X+Y)\\cdot{(\\overline{W}+\\overline{Z})}\\)</p> <ul> <li>Example: \\(H=A\\cdot{B}+A\\cdot{C}+B\\cdot{C}\\)</li> </ul> <p>Dual: \\(H=(A+B)\\cdot{(A+C)}\\cdot{(B+C)}\\)</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#duality-rules-cont_1","title":"Duality rules (Cont.)","text":"<ul> <li> <p>If the function G is the dual of F, then F is also G of duality. G and F is mutually duality formula.</p> </li> <li> <p>If the two logical functions F and G are equal, then the duality formula F' and G' are the same.</p> </li> <li> <p>Example:</p> </li> </ul> <p>\\(X+XY=X \\Leftrightarrow X(X+Y)=X\\)   (Absorption)</p> <p>\\(X(Y+Z)=XY+XZ \\Leftrightarrow X+YZ=(X+Y)(X+Z)\\)   (Distributive)</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#complementing-functions","title":"Complementing Functions","text":"<ul> <li> <p>For logic function F, interchange \\(+\\) and \\(\\cdot\\) operators and complement each constant value   and literal, then obtained the new function is the inverse function of the original function,   referred to as: \\(\\overline{F}\\)</p> </li> <li> <p>Example</p> </li> </ul> <p>\\(F=\\overline{A}B+C\\overline{D} \\Leftrightarrow \\overline{F}=(A+\\overline{B})(\\overline{C}+D)\\)</p> <p>\\(F=\\overline{X}Y\\overline{Z}+X\\bar{Y}\\bar{Z} \\Leftrightarrow \\overline{F}=(X+\\overline{Y}+Z)(\\overline{X}+Y+Z)\\)</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#q1-how-to-proof-aacdotba","title":"Q1: How to proof \\(A+A\\cdot{B}=A\\)?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#q2-how-to-proof-aboverlineacbcaboverlineac","title":"Q2: How to proof \\(AB+\\overline{A}C+BC=AB+\\overline{A}C\\)?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#consensus-theorem","title":"(Consensus Theorem)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#q3-how-to-proof-overlinexyzxoverlineyoverlineyxz","title":"Q3: How to proof \\(\\overline{(X+Y)}Z+X\\overline{Y}=\\overline{Y}(X+Z)\\)?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#useful-theorems","title":"Useful Theorems","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#example1-simplify-expression","title":"Example1: Simplify Expression","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#faboverlineacdoverlineabdoverlineacoverlinedabcd","title":"\\(F=AB+\\overline{A}CD+\\overline{A}BD+\\overline{A}C\\overline{D}+ABCD\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#example2-simplify-expression","title":"Example2: Simplify Expression","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture1/#labaoverlinecoverlinebcoverlinecboverlinebdoverlinedbadefg","title":"\\(L=AB+A\\overline{C}+\\overline{B}C+\\overline{C}B+\\overline{B}D+\\overline{D}B+ADE(F+G)\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/","title":"Number Systems and Boolean Algebra","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#lcdf","title":"LCDF","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#week-2-canonical-forms-and-circuit-optimization","title":"Week 2: Canonical Forms and Circuit Optimization","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#part-1","title":"Part 1","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#canonical-forms","title":"Canonical Forms","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#difficulties-in-manipulating-boolean-functions","title":"Difficulties in Manipulating Boolean Functions","text":"<ul> <li> <p>For Boolean function have function proof</p> </li> <li> <p>Problem: a Boolean function has multiple expressions.</p> </li> <li> <p>For expression simplification</p> </li> <li> <p>Problem 1: too many identities and theorems of Boolean algebra to apply</p> </li> <li> <p>Problem 2: requires skills for simplification (e.g., \\(BC=(A+\\overline{A})\\cdot{BC}\\))</p> </li> <li> <p>Solutions \\(\\bar{B}\\bar{D}+CD+AD+A\\overline{B}+\\overline{B}C \\xrightarrow{\\substack{Algebraic \\\\ Transformation}} \\Sigma_m(0,2,3,7,8,9,10,11,13,15)\\)</p> <p>$ \\xrightarrow{\\substack{Minimization \\ Theorem}} \\bar{B}\\bar{D}+(A+C)D$</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#canonical-forms-for-comparison-of-equality","title":"Canonical Forms for Comparison of Equality","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#boolean-expressions-for-a-truth-table","title":"Boolean Expressions for a Truth Table","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#minterms","title":"Minterms","text":"<ul> <li> <p>Minterms are AND terms with every variable present in either true (e.g., \\(x\\)) or complemented form (e.g., \\(\\overline{x}\\))</p> </li> <li> <p>For n-input variables, there are \\(2^n\\) minterms or \\(2^n\\) total number of possible input combinations.</p> </li> <li> <p>Each minterm equals 1 at exactly one particular input combination and is equal to 0 at all other combinations.</p> </li> <li> <p>In general, minterms are designated \\(m_i\\), where \\(i\\) corresponds the input binary combination at which this midterm is equal to 1.</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#maxterms","title":"Maxterms","text":"<ul> <li> <p>Maxterms are OR terms with every variable present in either true (e.g., \\(x\\)) or complemented form (e.g., \\(\\overline{x}\\))</p> </li> <li> <p>For n-input variables, there are \\(2^n\\) minterms or \\(2^n\\) total number of possible input combinations.</p> </li> <li> <p>Each maxterm equals 0 at exactly one particular input combination and is equal to 1 at all other combinations.</p> </li> <li> <p>In general, minterms are designated \\(m_i\\), where \\(i\\) corresponds the input binary combination at which this midterm is equal to 1.</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#two-principles-of-minterms-and-maxterms","title":"Two Principles of Minterms and Maxterms","text":"<ul> <li> <p>All variables will be present in a minterm or maxterm and will be listed in the same order (usually alphabetically)</p> </li> <li> <p>Whether minterm or maxterm must contain all variables.</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#practice1-write-down-canonical-forms-for","title":"Practice1: Write down Canonical Forms for","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#fabcbarxbaryzxbarybarzxyz","title":"\\(F(A,B,C)=\\bar{x}\\bar{y}z+x\\bar{y}\\bar{z}+xyz\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#practice2-find-fabcdem_2m_9m_17m_23","title":"Practice2: Find \\(F(A,B,C,D,E)=m_{2}+m_{9}+m_{17}+m_{23}\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#q-how-to-implement-fabcaoverlinebc-as-a-sum-of-minterms-and-a-product-of-maxterms","title":"Q: How to implement \\(F(A,B,C)=A+\\overline{B}C\\) as a sum of minterms and a product of maxterms?","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#transformation-to-canonical-sum-of-minterms","title":"Transformation to Canonical Sum of Minterms","text":"<ul> <li>Any Boolean Function can be expressed as a Sum of Minterms (SOM).</li> <li>For the function table, the minterms used are the forms corresponding to the 1's</li> <li> <p>For expressions, expand all terms first to explicitly list all minterms. Do this by \"ANDing\" any term missing a variable v with a term \\((v+\\overline{v})\\)</p> </li> <li> <p>Example: Implement \\(f=x+\\bar{x}\\bar{y}\\) as a sum of minterms.</p> </li> <li>First expand terms: \\(f=x(y+\\overline{y})+\\bar{x}\\bar{y}\\)</li> <li>Then distribute terms: \\(f=xy+x\\overline{y}+\\bar{x}\\bar{y}\\)</li> <li>Express as sum of minterms: \\(f=m_0+m_2+m_3\\)</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#transformation-to-canonical-product-of-maxterms","title":"Transformation to Canonical Product of Maxterms","text":"<ul> <li> <p>Any Boolean Function can be expressed as a Product of Maxterms (POM).</p> </li> <li> <p>For the function table, the maxterms used are the terms corresponding to the 0's</p> </li> <li> <p>For an expression, expand all terms first to explicitly list all maxterms. Do this by first applying the second distributive law, \"ORing\" terms missing variable v with a term equal to \\(v\\cdot\\overline{v}\\) and then applying the distributive law again.</p> </li> <li> <p>Example: Convert to product of maxterms: \\(f(x,y,z)=x+\\bar{x}\\bar{y}\\)</p> </li> <li> <p>Apply the distributive law:</p> <p>\\(x+\\bar{x}\\bar{y}=(x+\\bar{x})(x+\\bar{y})=1\\cdot(x+\\bar{y})=x+\\bar{y}\\)</p> </li> <li> <p>Add missing variable z:</p> <p>\\(x+\\overline{y}+z\\cdot{\\overline{z}}=(x+\\overline{y}+z)(x+\\overline{y}+\\overline{z})\\)</p> </li> <li> <p>Express as sum of minterms: \\(f=M_2\\cdot{M_3}\\)</p> </li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#conversion-between-forms","title":"Conversion Between Forms","text":"<ul> <li>To convert between sum-of-minterms and product-of-maxterms form (or vice-versa) we follow these steps:</li> <li>Find the function complement by swapping terms in the list with terms not in the list</li> <li> <p>Change from product to sums, or vice versa.</p> </li> <li> <p>Example: Given F as before: \\(F(x,y,z)=\\Sigma_m(1,3,5,7)\\)</p> </li> <li>Form the Complement: \\(\\overline{F}(x,y,z)=\\Sigma_m(0,2,4,6)\\)</li> <li>Then use the other form with the same indices - this forms the complement again, giving the other form of the origin function: \\(F(x,y,z)=\\Pi_M(0,2,4,6)\\)</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#minterms-to-maxterms-conversion","title":"Minterms to Maxterms Conversion","text":"<ul> <li>Example: Implement F1 as POM:</li> </ul> <p>\\(\\overline{F_1}=m_0+m_2+m_3+m_5+m_6\\)</p> <p>\\(F_1=\\overline{m_0}\\cdot\\overline{m_2}\\cdot\\overline{m_3}\\cdot\\overline{m_5}\\cdot\\overline{m_6}=M_0\\cdot{M_2}\\cdot{M_3}\\cdot{M_5}\\cdot{M_6}\\)</p>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#part-2","title":"Part 2","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#circuit-optimization","title":"Circuit Optimization","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#circuit-optimization_1","title":"Circuit Optimization","text":"<ul> <li>Goal: To obtain the simplest implementation for a given function</li> <li>Optimization is a more formal approach to simplification that is preformed using a specific procedure or algorithm</li> <li>Optimization requires a cost criterion to measure the simplicity of a circuit</li> <li>Distinct cost criteria we will use:</li> <li>Literal cost (L)</li> <li>Gate input cost (G)</li> <li>Gate input cost with NOTs (GN)</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#input-cost","title":"Input Cost","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#karnaugh-maps-k-map","title":"Karnaugh Maps (K-map)","text":"<ul> <li>A K-map is a collection of squares</li> <li>Each square represents a minterm or maxterm</li> <li>The Boolean results are transferred from a truth table onto a two-dimensional grid</li> <li>Adjacent squares differ in the value of one variable (each square is ordered in Gray Code)</li> <li>Alternative algebraic expressions for the same function are derived by recognizing patterns of squares</li> <li>The K-map can be viewed as</li> <li>A reorganized version of the truth table</li> <li>A clever way to rewrite truth tables to make it easier to figure out the logic</li> <li>A topologically-warped Venn diagram as used to visualize sets in algebra of sets</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#steps-to-minimize-expressions-using-k-map","title":"Steps to Minimize Expressions using K-map","text":"<ul> <li>Step 1: Identify minterms or maxterms</li> <li>Step 2: Fill the K-map with minterms or maxterms</li> <li>For SOM, put 1's in squares respective to the minterms</li> <li>For POM, put 0's in squares respective to the maxterms</li> <li>Step 3: Form the rectangular groups containing maximum number of terms in power of two</li> <li>Step 4: Obtain the simplified expression for groups</li> <li>For SOM, find the product terms and sum them up</li> <li>For POM, find the sum terms and take product of them</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#four-variable-maps","title":"Four Variable Maps","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#example-1-four-variable-map-simplification","title":"Example 1: Four Variable Map Simplification","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#fwxyzsigma_m0245678101315","title":"\\(F(W,X,Y,Z)=\\Sigma_{m}(0,2,4,5,6,7,8,10,13,15)\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#example-2-four-variable-map-simplification","title":"Example 2: Four Variable Map Simplification","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#fwxyzsigma_m34579131415","title":"\\(F(W,X,Y,Z)=\\Sigma_m(3,4,5,7,9,13,14,15)\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#dont-cares-in-k-maps","title":"Don't Cares in K-Maps","text":"<ul> <li>Sometimes a function table or map contains entries for which it is known:</li> <li>The input values for the minterm will never occur, or</li> <li> <p>The output value for minterm is not used</p> </li> <li> <p>In these cases, the output value need not be defined.</p> </li> <li>The output value is defined as a \"don't care\" that may on either a 0 or 1 value in resulting solutions</li> <li>By placing \"don't cares\" (an \"x\" entry) in the function or map, the cost of the logic circuit may be lowered.</li> <li>Example: A logic function having the binary codes for the BCD digits as its inputs. Only the codes for 0 through 9 are used. The six codes, 1010 through 1111 will never occur, so the output values for these codes are \"don't cares\".</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#product-of-sums-example","title":"Product of Sums Example","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#systematic-simplification","title":"Systematic Simplification","text":"<ul> <li>Implicant is a minterm/product term in SOP or maxterm/sumterm in POS of a Boolean function. For example:</li> </ul> <p>\\(F=AB+ABC+BC\\). Implicants are AB, ABC and BC.</p> <ul> <li> <p>The group of \"1's\" is called implicant. There are two types of implicants: Prime Implicant and Essential Prime Implicant.</p> </li> <li> <p>A Prime Implicant is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2.</p> </li> <li>An Essential Prime Implicant is a prime implicant that covers one or more minterms that no combination of other prime implicants are able to include.</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#practice1-find-all-prime-implicants-for","title":"Practice1: Find all prime implicants for:","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#fabcdsigma_m02389101112131415","title":"\\(F(A,B,C,D)=\\Sigma_m(0,2,3,8,9,10,11,12,13,14,15)\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#practice2-find-all-prime-implicants-for","title":"Practice2: Find all prime implicants for:","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#gabcdsigma_m0234712131415","title":"\\(G(A,B,C,D)=\\Sigma_m(0,2,3,4,7,12,13,14,15)\\)","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#quine-mccluskey-algorithm","title":"Quine-McCluskey Algorithm","text":"<ul> <li>Find all prime implicants</li> <li>Include all essential prime implicants in the solution</li> <li>Select a minimum cost set of non-essential prime implicants to cover all minterms not yet covered:</li> <li>Obtaining a good simplified solution: Use the Selection Rule</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#prime-implicant-selection-rule","title":"Prime Implicant Selection Rule","text":"<ul> <li>Minimize the overlap among prime implicants as much as possible. </li> <li>In particular, in the final solution, make sure that each prime implicant selected includes at least one midterm not included in any other prime implicant selected.</li> </ul>"},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#simplify-boolean-expression-f-through-k-map-given-by","title":"Simplify Boolean Expression \\(F\\) through K-map Given by:","text":""},{"location":"%E6%95%B0%E9%80%BB/Lecture2/#fabcdsigma_m346911sigma_d2571013","title":"\\(F(A,B,C,D)=\\Sigma_m(3,4,6,9,11)+\\Sigma_d(2,5,7,10,13)\\)","text":""}]}